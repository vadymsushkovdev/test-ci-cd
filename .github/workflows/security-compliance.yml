# .github/workflows/security-compliance.yml
name: Security Compliance Report

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  issues:   write

concurrency:
  group: security-compliance
  cancel-in-progress: true

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      # ───────── 0. Checkout & Setup ──────────────────────────
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      # ───────── 1. Semgrep SAST (TS) ─────────────────────────
      - name: Semgrep scan
        uses: returntocorp/semgrep-action@v2
        with:
          config: p/ci  # you can swap to p/security, or your own .semgrep.yml
          output-format: sarif
          output: semgrep.sarif

      # ───────── 2. Trivy filesystem (deps & secrets) ──────────
      - name: Trivy FS scan
        run: trivy fs --format sarif --output trivy-fs.sarif .

      # ───────── 3. Trivy IaC (Terraform) ─────────────────────
      - name: Trivy IaC scan
        run: |
          if [ -d infra/terraform ]; then
            trivy config --format sarif --output trivy-iac.sarif infra/terraform
          else
            touch trivy-iac.sarif
          fi

      # ───────── 4. Trivy container image ──────────────────────
      - name: Build Docker image
        run: docker build -t app:${{ github.sha }} .
      - name: Trivy image scan
        run: trivy image --format sarif --output trivy-img.sarif app:${{ github.sha }}

      # ───────── 5. Merge *all* SARIFs ─────────────────────────
      - name: Merge SARIF
        run: |
          jq -s '{version:"2.1.0", runs: [.[].runs[]]}' \
            semgrep.sarif \
            trivy-fs.sarif \
            trivy-iac.sarif \
            trivy-img.sarif \
          > merged.sarif

      # ───────── 6. Extract high/critical findings ─────────────
      - name: Extract findings
        id: findings
        run: |
          jq -r '
            .runs[].results[]
            | select(.level=="error" or .level=="warning")
            | "\(.tool.driver.name)|||\(.rule.id)|||\(.locations[0].physicalLocation.artifactLocation.uri)|||\(.locations[0].physicalLocation.region.startLine)//\(.level|ascii_upcase)"' \
            merged.sarif \
          | sort -u > findings.txt
          echo "found=$(wc -l < findings.txt)" >> "$GITHUB_OUTPUT"

      # ───────── 7. Open grouped issues per file ───────────────
      - name: Open issues for new findings
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs   = require('fs'),
                  path = require('path'),
                  cwd  = process.cwd();

            // Gather findings by file
            const groups = {};
            for (let line of fs.readFileSync('findings.txt','utf8').trim().split('\n')) {
              const [tool, ruleId, rawFile, lineAndSev] = line.split('|||');
              if (![tool,ruleId,rawFile,lineAndSev].every(Boolean)) continue;
              let [lineNum, sevRaw] = lineAndSev.split('//');
              sevRaw = sevRaw.toUpperCase();
              let file = rawFile.replace(/^(\.\/|\/)+/,'');
              if (!file.includes('.')||file.includes('node_modules')) continue;

              // try root, src/, infra/terraform
              let full = path.join(cwd, file);
              if (!fs.existsSync(full)) {
                for (const pfx of ['src','lib','infra/terraform']) {
                  const alt = path.join(cwd, pfx, file);
                  if (fs.existsSync(alt)) { file = `${pfx}/${file}`; full = alt; break; }
                }
              }
              if (!fs.existsSync(full)) continue;

              groups[file] = groups[file]||[];
              groups[file].push({ tool, ruleId, lineNum, severity: sevRaw });
            }

            const { owner, repo } = context.repo,
                  sha            = process.env.GITHUB_SHA,
                  existingIssues = (await github.rest.issues.listForRepo({
                    owner, repo, state:'open', per_page:100
                  })).data;

            for (const [file, finds] of Object.entries(groups)) {
              const hasCrit = finds.some(f=>f.severity==='CRITICAL'),
                    label   = hasCrit ? 'critical' : 'high';

              if (existingIssues.find(i=>
                i.title.includes(file) && i.labels.some(l=>l.name===label)
              )) continue;

              const baseUrl  = `https://github.com/${owner}/${repo}/blob/${sha}/${encodeURI(file)}`,
                    bullets  = finds.map(f=>
                      `- [L${f.lineNum}](${baseUrl}#L${f.lineNum}): **${f.ruleId}** (${f.tool}/${f.severity})`
                    ).join('\n');

              const title = `[${label.toUpperCase()}] Security findings in ${file}`,
                    body  = [
                      `Detected the following **${label.toUpperCase()}** issues in \`${file}\`:`,
                      '',
                      bullets,
                      '',
                      'Download the `merged.sarif` artifact from this workflow run for full context.'
                    ].join('\n');

              console.log('Creating issue:', title);
              await github.rest.issues.create({ owner, repo, title, body, labels:['security',label] });
            }
