# .github/workflows/security-compliance.yml
name: Security Compliance Report

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  issues:   write

concurrency:
  group: security-compliance
  cancel-in-progress: true

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      # ── 0. Checkout & setup ───────────────────────────────────
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # ── 1. Install & run Semgrep CLI on src/ ──────────────────
      - name: Install Semgrep
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Run Semgrep on src/
        run: |
          pip install semgrep
          semgrep --config p/ci --sarif --output semgrep.sarif src

      # ── 2. Install & run Trivy FS scan ────────────────────────
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sh -s -- -b ~/.local/bin v0.64.1
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Trivy filesystem scan
        run: trivy fs --format sarif --output trivy-fs.sarif .

      # ── 3. Trivy IaC scan ─────────────────────────────────────
      - name: Trivy IaC scan
        run: |
          if [ -d infra/terraform ]; then
            trivy config --format sarif --output trivy-iac.sarif infra/terraform
          else
            touch trivy-iac.sarif
          fi

      # ── 4. Build & Trivy image scan ──────────────────────────
      - name: Build Docker image
        run: docker build -t app:${{ github.sha }} .

      - name: Trivy image scan
        run: trivy image --format sarif --output trivy-img.sarif app:${{ github.sha }}

      # ── 5. Merge all SARIF reports ────────────────────────────
      - name: Merge SARIFs
        run: |
          jq -s '{version:"2.1.0", runs: [.[].runs[]]}' \
            semgrep.sarif \
            trivy-fs.sarif \
            trivy-iac.sarif \
            trivy-img.sarif \
          > merged.sarif

      # ── 6. Extract HIGH/CRITICAL findings ─────────────────────
      - name: Extract findings
        id: findings
        run: |
          jq -r '
            .runs[].results[]
            | select(.level=="error" or .level=="warning")
            | "\(.tool.driver.name)|||\(.rule.id)|||\(.locations[0].physicalLocation.artifactLocation.uri)|||\(.locations[0].physicalLocation.region.startLine)//\(.level|ascii_upcase)"' \
            merged.sarif \
          | sort -u > findings.txt
          echo "found=$(wc -l < findings.txt)" >> $GITHUB_OUTPUT

      # ── 7. Open grouped issues per file ───────────────────────
      - name: Open issues for new findings
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs   = require('fs');
            const path = require('path');
            const cwd  = process.cwd();

            // 1) Read & group findings by file
            const groups = {};
            for (let raw of fs.readFileSync('findings.txt','utf8').split('\n').filter(Boolean)) {
              raw = raw
                .replace(/^file:\/\/[^|]+/, '')
                .replace(new RegExp(`^${cwd}`), '');

              const [tool, ruleId, rawFile, lineAndSev] = raw.split('|||');
              if (!tool||!ruleId||!rawFile||!lineAndSev) continue;
              let [lineNum, sevRaw] = lineAndSev.split('//');
              sevRaw = sevRaw.toUpperCase();

              let file = rawFile.replace(/^(\.\/|\/)+/, '');
              if (!file.includes('.') || file.includes('node_modules')) continue;

              // try root, then src/, lib/, infra/terraform
              let full = path.join(cwd, file);
              if (!fs.existsSync(full)) {
                for (const pfx of ['src','lib','infra/terraform']) {
                  const alt = path.join(cwd, pfx, file);
                  if (fs.existsSync(alt)) {
                    file = `${pfx}/${file}`;
                    full = alt;
                    break;
                  }
                }
              }
              if (!fs.existsSync(full)) continue;

              groups[file] = groups[file] || [];
              groups[file].push({ tool, ruleId, lineNum, severity: sevRaw });
            }

            const { owner, repo } = context.repo;
            const sha = process.env.GITHUB_SHA;
            const existing = (await github.rest.issues.listForRepo({
              owner, repo, state: 'open', per_page: 100
            })).data;

            // 2) One issue per file
            for (const [file, finds] of Object.entries(groups)) {
              const label = finds.some(f => f.severity === 'CRITICAL')
                ? 'critical' : 'high';
              if (existing.find(i =>
                i.title.includes(file) &&
                i.labels.some(l => l.name === label)
              )) continue;

              const baseUrl = `https://github.com/${owner}/${repo}/blob/${sha}/${encodeURI(file)}`;
              const bullets = finds.map(f =>
                `- [L${f.lineNum}](${baseUrl}#L${f.lineNum}): **${f.ruleId}** (${f.tool}/${f.severity})`
              ).join('\n');

              const title = `[${label.toUpperCase()}] Security findings in ${file}`;
              const body  = [
                `Detected the following **${label.toUpperCase()}** issues in \`${file}\`:`,
                '',
                bullets,
                '',
                'Download the `merged.sarif` artifact from this run for full context.'
              ].join('\n');

              console.log('➤ Creating issue:', title);
              await github.rest.issues.create({
                owner, repo, title, body,
                labels: ['security', label]
              });
            }
