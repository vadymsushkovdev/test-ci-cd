# .github/workflows/security-compliance.yml
name: Security Compliance Report

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  issues: write

concurrency:
  group: security-compliance
  cancel-in-progress: true

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      # ── 0. Checkout & Node setup ──────────────────────────
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # ── 1. Trivy filesystem scan ──────────────────────────
      - name: Trivy project scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: trivy-project.sarif
          severity: CRITICAL,HIGH
          hide-progress: true

      # ── 2. Trivy image scan ───────────────────────────────
      - name: Build Docker image for scan
        run: docker build -t app:${{ github.sha }} .

      - name: Trivy image scan
        run: trivy image --format sarif --output trivy-image.sarif app:${{ github.sha }}

      # ── 3. Trivy IaC scan (optional) ──────────────────────
      - name: Trivy IaC scan
        run: trivy config infra/terraform --format sarif --output trivy-iac.sarif || true

      # ── 4. Merge all Trivy SARIF files ────────────────────
      - name: Merge Trivy SARIF
        run: |
          jq -s '{version:"2.1.0", runs: [.[].runs[]]}' \
            trivy-project.sarif \
            trivy-image.sarif \
            trivy-iac.sarif \
          > merged.sarif

      # ── 5. Extract HIGH/CRITICAL findings ─────────────────
      - name: Extract High/Critical results
        id: findings
        run: |
          jq -r '
            .runs[].results[]
            | select(.level=="error" or .level=="warning")
            | "\(.ruleId)|||\(.locations[0].physicalLocation.artifactLocation.uri)|||\(.locations[0].physicalLocation.region.startLine)//\(.level|ascii_upcase)"' \
            merged.sarif \
          | sort -u > findings.txt
          echo "found=$(wc -l < findings.txt)" >> "$GITHUB_OUTPUT"

      # ── 6. Open (grouped) issues for new findings ─────────
      - name: Open issues for new findings
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs   = require('fs');
            const path = require('path');

            // Group findings by file
            const groups = {};
            for (let raw of fs.readFileSync('findings.txt','utf8')
                                  .trim().split('\n').filter(Boolean)) {
              // strip any leading file:// URI
              raw = raw.replace(/^file:\/\/[^|]+/, '');
              const parts = raw.split('|||');
              if (parts.length !== 3) continue;

              const [ruleId, rawFile, lineAndSev] = parts;
              const [lineNum, sevRaw] = lineAndSev.split('//');
              const severity = sevRaw.toUpperCase();

              // normalize path
              let file = rawFile
                .replace(/^file:\/\/[^/]+\/+/, '')
                .replace(/^(\.\/|\/)+/, '');

              // skip vendored or non-code
              if (file.includes('node_modules') || !file.includes('.')) continue;

              // try repo root, then src/, then lib/
              let fullPath = path.join(process.cwd(), file);
              if (!fs.existsSync(fullPath)) {
                const alt1 = path.join(process.cwd(), 'src', file);
                const alt2 = path.join(process.cwd(), 'lib', file);
                if (fs.existsSync(alt1)) {
                  file = path.posix.join('src', file);
                  fullPath = alt1;
                } else if (fs.existsSync(alt2)) {
                  file = path.posix.join('lib', file);
                  fullPath = alt2;
                } else {
                  console.log(`❌ file not found, skipping: ${file}`);
                  continue;
                }
              }

              groups[file] = groups[file] || [];
              groups[file].push({ ruleId, lineNum, severity });
            }

            const { owner, repo } = context.repo;
            const sha = process.env.GITHUB_SHA;

            // Preload existing open issues
            const { data: issues } = await github.rest.issues.listForRepo({
              owner, repo, state: 'open', per_page: 100
            });

            // For each file, open a single grouped issue
            for (const [file, findings] of Object.entries(groups)) {
              // pick highest severity label
              const sev = findings.some(f=>f.severity==='CRITICAL')
                          ? 'critical'
                          : 'high';

              // skip if issue already exists for this file+severity
              if (issues.some(issue =>
                  issue.title.includes(file) &&
                  issue.labels.some(l=>l.name===sev)
              )) continue;

              // build bullets
              const baseUrl = `https://github.com/${owner}/${repo}/blob/${sha}/${encodeURI(file)}`;
              const bullets = findings.map(f =>
                `- [L${f.lineNum}](${baseUrl}#L${f.lineNum}): **${f.ruleId}** (${f.severity})`
              ).join('\n');

              const title = `[${sev.toUpperCase()}] Security findings in ${file}`;
              const body = [
                `The following **${sev.toUpperCase()}** findings were detected by Trivy in \`${file}\`:`,
                ``,
                bullets,
                ``,
                `Download the \`merged.sarif\` artifact from this workflow run for full details.`
              ].join('\n');

              console.log(`🚀 creating issue: ${title}`);
              await github.rest.issues.create({
                owner, repo,
                title, body,
                labels: ['security', sev]
              });
            }
