# .github/workflows/security-compliance.yml
name: Security Compliance Report

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  issues: write

concurrency:
  group: security-compliance
  cancel-in-progress: true

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      # ‚îÄ‚îÄ 0. Checkout & Node setup ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # ‚îÄ‚îÄ 1. Trivy filesystem scan ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Trivy project scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: trivy-project.sarif
          severity: CRITICAL,HIGH
          hide-progress: true

      # ‚îÄ‚îÄ 2. Trivy image scan ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Build Docker image for scan
        run: docker build -t app:${{ github.sha }} .

      - name: Trivy image scan
        run: trivy image --format sarif --output trivy-image.sarif app:${{ github.sha }}

      # ‚îÄ‚îÄ 3. Trivy IaC scan (optional) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Trivy IaC scan
        run: trivy config infra/terraform --format sarif --output trivy-iac.sarif || true

      # ‚îÄ‚îÄ 4. Merge all Trivy SARIF files ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Merge Trivy SARIF
        run: |
          jq -s '{version:"2.1.0", runs: [.[].runs[]]}' \
            trivy-project.sarif \
            trivy-image.sarif \
            trivy-iac.sarif \
          > merged.sarif

      # ‚îÄ‚îÄ 5. Extract HIGH/CRITICAL findings ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Extract High/Critical results
        id: findings
        run: |
          jq -r '
            .runs[].results[]
            | select(.level=="error" or .level=="warning")
            | "\(.ruleId)|||\(.locations[0].physicalLocation.artifactLocation.uri)|||\(.locations[0].physicalLocation.region.startLine)//\(.level|ascii_upcase)"' \
            merged.sarif \
          | sort -u > findings.txt
          echo "found=$(wc -l < findings.txt)" >> "$GITHUB_OUTPUT"

      # ‚îÄ‚îÄ 6. Open issues for new findings ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Open issues for new findings
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs   = require('fs');
            const path = require('path');
            const lines = fs.readFileSync('findings.txt','utf8')
              .trim().split('\n').filter(Boolean);

            const { owner, repo } = context.repo;
            const sha = process.env.GITHUB_SHA;

            // Preload open issues
            const { data: issues } = await github.rest.issues.listForRepo({
              owner, repo, state: 'open', per_page: 100
            });

            for (const line of lines) {
              // 1) Split into [ruleId, rawFile, lineAndSev]
              const parts = line.split('|||');
              if (parts.length !== 3) {
                console.log(`‚ùå malformed entry, skipping: ${line}`);
                continue;
              }
              const [ruleId, rawFile, lineAndSev] = parts;

              // 2) Split lineAndSev into [lineNum, severityRaw]
              const ls = lineAndSev.split('//');
              if (ls.length !== 2) {
                console.log(`‚ùå malformed line//sev, skipping: ${lineAndSev}`);
                continue;
              }
              const [lineNum, severityRaw] = ls;
              const severity = severityRaw.toUpperCase();
              const sev = severity.toLowerCase();

              // 3) Normalize path
              let file = rawFile.replace(/^(\.\/|\/+)/, '');

              // 4) Skip vendored or non-code artifacts
              if (file.includes('node_modules') || !file.includes('.')) {
                console.log(`‚ö†Ô∏è skipping artifact: ${file}`);
                continue;
              }

              // 5) Verify existence, try infra/terraform fallback
              let fullPath = path.join(process.cwd(), file);
              if (!fs.existsSync(fullPath)) {
                const alt = path.join(process.cwd(), 'infra/terraform', file);
                if (fs.existsSync(alt)) {
                  file = path.posix.join('infra/terraform', file);
                  fullPath = alt;
                } else {
                  console.log(`‚ùå file not found, skipping: ${file}`);
                  continue;
                }
              }

              // 6) Avoid duplicate issues
              const dup = issues.some(issue =>
                issue.title.includes(ruleId) &&
                issue.title.includes(file) &&
                issue.labels.some(l => l.name === sev)
              );
              if (dup) {
                console.log(`‚úîÔ∏è already have issue for ${ruleId} in ${file}`);
                continue;
              }

              // 7) Build link to exact line
              const encoded = encodeURI(file);
              const fileUrl = `https://github.com/${owner}/${repo}/blob/${sha}/${encoded}#L${lineNum}`;

              // 8) Create the issue
              const title = `[${severity}] ${ruleId} in ${file}:${lineNum}`;
              const body = `
              A new **${severity}** finding was detected by Trivy.
            
            - **Rule:** ${ruleId}
            - **File:** [${file}](${fileUrl})
            - **Line:** ${lineNum}
              
              Download the **merged.sarif** artifact from this workflow run for full context.
              `;
            console.log(`üöÄ opening issue: ${title}`);
              await github.rest.issues.create({
              owner, repo,
              title, body,
            labels: ['security', sev]
            });
              }
