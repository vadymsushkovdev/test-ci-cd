# .github/workflows/security-compliance.yml
name: Security Compliance Report

on:
  push:
    branches: [main]
  schedule:
    - cron: '*/5 * * * *'        # every 5 minutes (UTC)

permissions:
  contents: read        # still read-only on code
  security-events: write  # needed for SARIF upload
  issues: write         # for creating manual-approval issues
  pull-requests: write  # if you need to open or comment on PRs

concurrency:
  group: security-compliance
  cancel-in-progress: true      # cancel any in-flight scan when a new run starts

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€ 0. Checkout â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€ 0.5 Setup Node â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€ 1. Trivy scans (fs, image, IaC) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Trivy project scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: trivy-project.sarif
          severity: CRITICAL,HIGH
          hide-progress: true

      - name: Build Docker image for scan
        run: docker build -t app:${{ github.sha }} .

      - name: Trivy image scan
        run: trivy image --format sarif --output trivy-image.sarif app:${{ github.sha }}

      - name: Trivy IaC scan
        run: trivy config infra/terraform --format sarif --output trivy-iac.sarif

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€ 2. Secrets scan with TruffleHog (JSON) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Install TruffleHog
        run: |
          python3 -m pip install --upgrade pip
          pip install trufflehog

      - name: Run TruffleHog local JSON scan
        continue-on-error: true
        run: |
          echo "Scanning local repo at file://$GITHUB_WORKSPACE"
          trufflehog --json file://$GITHUB_WORKSPACE > trufflehog.json || true

      - name: Upload TruffleHog JSON as artifact
        uses: actions/upload-artifact@4.6.2
        if: always()
        with:
          name: trufflehog-results
          path: trufflehog.json

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€ 3. Merge SARIF files (Trivy only) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Merge Trivy SARIF
        id: merge
        run: |
          jq -s '{version:"2.1.0", runs: [.[].runs[]]}' \
            trivy-project.sarif trivy-image.sarif trivy-iac.sarif \
            > merged.sarif
          echo "sarif=merged.sarif" >> "$GITHUB_OUTPUT"

      # â”€â”€â”€ 4. Upload merged SARIF to Code Scanning API â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: ${{ steps.merge.outputs.sarif }}

      - name: Post-enable-code-scanning notice
        if: failure() && steps.merge.outcome == 'success'
        run: |
          echo "::warning::The SARIF upload step failedâ€”make sure Code Scanning is enabled in Settings â†’ Security â†’ Code scanning and analysis."

      # â”€â”€â”€ 5. Open Issues for High & Critical code-scanning alerts â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Create issues for High/Critical alerts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // severity levels we care about
            const severities = ['CRITICAL', 'HIGH'];
            const { owner, repo } = context.repo;

            // 1. List all open code-scanning alerts
            const { data: alerts } = await github.rest.codeScanning.listAlertsForRepo({
              owner,
              repo,
              state: 'open',
              per_page: 100
            });

            for (const alert of alerts) {
              const sev = alert.rule.severity.toUpperCase();
              if (!severities.includes(sev)) continue;

              // Unique key for this alert
              const key = `${alert.rule.id}-${alert.location?.resultFile?.startLine ?? '0'}`;

              // 2. Skip if we've already opened an issue for this alert
              const existing = await github.rest.search.issuesAndPullRequests({
                q: `repo:${owner}/${repo} is:issue in:title ${alert.rule.id}`
              });
              if (existing.data.total_count > 0) continue;

              // 3. Build issue title/body
              const title = `[${sev}] Code Scan: ${alert.rule.id} â€“ ${alert.rule.description}`;
              const body = `
              **A new ${sev} vulnerability was detected by ${alert.tool.name}.**
  
              **Rule:** ${alert.rule.id}
              **Message:** ${alert.rule.description}
              **File:** ${alert.location?.resultFile?.uri ?? 'unknown'}
              **Line:** ${alert.location?.resultFile?.startLine ?? 'n/a'}
              
              ðŸ”— [View the alert in GitHub](${alert.html_url})
              
              _This issue was auto-generated by your Security Compliance workflow._`;
              
              // 4. Create issue with labels
              await github.rest.issues.create({
              owner,
              repo,
              title,
              body,
            labels: ['security', sev.toLowerCase()]
            });
              }




