# .github/workflows/security-compliance.yml
name: Security Compliance Report

on:
  push:
    branches: [main]
  schedule:
    - cron: '*/5 * * * *'        # every 5 minutes (UTC)

permissions:
  contents: read
  security-events: write    # for SARIF upload
  issues: write             # to open security issues
  pull-requests: write

concurrency:
  group: security-compliance
  cancel-in-progress: true

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      # ── 0. Checkout ─────────────────────────────────────────
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ── 0.5 Setup Node ───────────────────────────────────────
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # ── 1. CodeQL SAST ───────────────────────────────────────
      - name: Init CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: typescript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Run CodeQL analyze
        uses: github/codeql-action/analyze@v3
        with:
          output: codeql.sarif      # collect SARIF for merge

      # ── 2. Trivy scans (fs, image, IaC) ───────────────────────
      - name: Trivy project scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: trivy-project.sarif
          severity: CRITICAL,HIGH
          hide-progress: true

      - name: Build Docker image for scan
        run: docker build -t app:${{ github.sha }} .

      - name: Trivy image scan
        run: trivy image --format sarif --output trivy-image.sarif app:${{ github.sha }}

      - name: Trivy IaC scan
        run: trivy config infra/terraform --format sarif --output trivy-iac.sarif

      # ── 3. Merge all SARIF files ───────────────────────────────
      - name: Merge SARIF (CodeQL + Trivy)
        id: merge
        run: |
          # combine runs from all SARIFs
          jq -s '{version:"2.1.0", runs: [.[].runs[]]}' \
            codeql.sarif \
            trivy-project.sarif \
            trivy-image.sarif \
            trivy-iac.sarif \
            > merged.sarif
          echo "sarif=merged.sarif" >> "$GITHUB_OUTPUT"

      # ── 4. Upload combined SARIF ───────────────────────────────
      - name: Upload merged SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.merge.outputs.sarif }}

      # ── 5. Create issues for High/Critical alerts ──────────────
      - name: Create issues for High/Critical alerts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const severities = ['CRITICAL', 'HIGH'];
            const { owner, repo } = context.repo;

            console.log('⏳ fetching code-scanning alerts…');
            const { data: alerts } = await github.rest.codeScanning.listAlertsForRepo({
              owner, repo, state: 'open', per_page: 100
            });
            console.log(`🔍 found ${alerts.length} alerts`);

            for (const alert of alerts) {
              const sev = alert.rule.severity.toUpperCase();
              if (!severities.includes(sev)) continue;

              // skip if already issued
              const { data: existing } = await github.rest.search.issuesAndPullRequests({
                q: `repo:${owner}/${repo} is:issue in:title "${alert.rule.id}"`
              });
              if (existing.total_count) continue;

              const title = `[${sev}] Code Scan: ${alert.rule.id} – ${alert.rule.description}`;
              const body = `
              **A new ${sev} vulnerability was detected by ${alert.tool.name}.**
              
              **Rule:** ${alert.rule.id}
              **Message:** ${alert.rule.description}
              **File:** ${alert.location?.resultFile?.uri ?? 'unknown'}
              **Line:** ${alert.location?.resultFile?.startLine ?? 'n/a'}
              
              🔗 [View the alert in GitHub](${alert.html_url})
              
              _This issue was auto-generated._`;
              
              console.log(`🚀 opening issue for ${alert.rule.id}`);
              await github.rest.issues.create({
              owner, repo,
              title, body,
            labels: ['security', sev.toLowerCase()]
            });
              }
