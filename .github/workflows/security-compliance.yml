# .github/workflows/security-compliance.yml
name: Security Compliance Report

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  issues: write

concurrency:
  group: security-compliance
  cancel-in-progress: true

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      # ── 0. Checkout & Node/Trivy setup ───────────────────────
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b ~/.local/bin v0.64.1
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # ── 1. Trivy filesystem scan (includes src/) ─────────────
      - name: Trivy FS scan (src & root)
        run: |
          trivy fs --format sarif --output trivy-fs.sarif .

      # ── 2. Trivy IaC scan (terraform) ────────────────────────
      - name: Trivy IaC scan
        run: |
          if [ -d infra/terraform ]; then
            trivy config --format sarif --output trivy-iac.sarif infra/terraform
          else
            echo "no infra/terraform folder, skipping IaC"
            touch trivy-iac.sarif
          fi

      # ── 3. Trivy image scan ───────────────────────────────────
      - name: Build Docker image
        run: docker build -t app:${{ github.sha }} .

      - name: Trivy image scan
        run: trivy image --format sarif --output trivy-img.sarif app:${{ github.sha }}

      # ── 4. Merge all Trivy SARIFs ────────────────────────────
      - name: Merge SARIFs
        run: |
          jq -s '{version:"2.1.0", runs: [.[].runs[]]}' \
            trivy-fs.sarif \
            trivy-iac.sarif \
            trivy-img.sarif \
          > merged.sarif

      # ── 5. Extract HIGH/CRITICAL findings ────────────────────
      - name: Extract findings
        id: findings
        run: |
          jq -r '
            .runs[].results[]
            | select(.level=="error" or .level=="warning")
            | "\(.ruleId)|||\(.locations[0].physicalLocation.artifactLocation.uri)|||\(.locations[0].physicalLocation.region.startLine)//\(.level|ascii_upcase)"' \
            merged.sarif \
          | sort -u > findings.txt
          echo "found=$(wc -l < findings.txt)" >> "$GITHUB_OUTPUT"

      # ── 6. Open grouped issues per file ──────────────────────
      - name: Open issues for new findings
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs   = require('fs');
            const path = require('path');

            // 1) read & group
            const groups = {};
            for (let raw of fs.readFileSync('findings.txt','utf8').split('\n').filter(Boolean)) {
              raw = raw.replace(/^file:\/\/[^|]+/, '');
              const [ruleId, rawFile, lineAndSev] = raw.split('|||');
              if (!ruleId||!rawFile||!lineAndSev) continue;
              const [lineNum, sevRaw] = lineAndSev.split('//');
              const severity = sevRaw.toUpperCase();
              let file = rawFile.replace(/^(\.\/|\/)+/,'');
              if (!file.includes('.') || file.includes('node_modules')) continue;

              // verify existence or try src/lib
              let p = path.join(process.cwd(), file);
              if (!fs.existsSync(p)) {
                for (const prefix of ['src','lib','infra/terraform']) {
                  const alt = path.join(process.cwd(), prefix, file);
                  if (fs.existsSync(alt)) {
                    file = `${prefix}/${file}`;
                    p = alt;
                    break;
                  }
                }
              }
              if (!fs.existsSync(p)) continue;

              groups[file] = groups[file]||[];
              groups[file].push({ruleId, lineNum, severity});
            }

            const { owner, repo } = context.repo;
            const sha = process.env.GITHUB_SHA;
            const existing = (await github.rest.issues.listForRepo({
              owner, repo, state:'open', per_page:100
            })).data;

            // 2) one issue per file
            for (const [file, finds] of Object.entries(groups)) {
              const label = finds.some(f=>f.severity==='CRITICAL') ? 'critical' : 'high';
              if (existing.find(i=> i.title.includes(file) && i.labels.find(l=>l.name===label))) {
                continue;
              }

              const base = `https://github.com/${owner}/${repo}/blob/${sha}/${encodeURI(file)}`;
              const bullets = finds.map(f=>`- [L${f.lineNum}](${base}#L${f.lineNum}): **${f.ruleId}** (${f.severity})`).join('\n');

              const title = `[${label.toUpperCase()}] Security findings in ${file}`;
              const body  = [
                `The following **${label.toUpperCase()}** findings were detected by Trivy in \`${file}\`:`,
                '',
                bullets,
                '',
                'Download the `merged.sarif` artifact from this run for full context.'
              ].join('\n');

              console.log('➤ Creating issue:', title);
              await github.rest.issues.create({ owner, repo, title, body, labels: ['security',label] });
            }
