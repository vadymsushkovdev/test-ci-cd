name: Security Pre-Merge Gate

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

concurrency:
  group: security-gate
  cancel-in-progress: true

jobs:
  security-scan:
    name: Security Compliance Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Python + Semgrep
        run: |
          python -m pip install --upgrade pip
          pip install semgrep==1.128.0

      - name: Semgrep SAST
        run: |
          semgrep --config p/security --sarif --output semgrep.sarif src || true

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b ~/.local/bin v0.51.1
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Trivy Filesystem Scan
        run: trivy fs --format sarif --output trivy-fs.sarif --severity CRITICAL,HIGH .

      - name: Build Docker Image for Trivy
        run: docker build -t app:${{ github.sha }} .

      - name: Trivy Image Scan
        run: trivy image --format sarif --output trivy-img.sarif --severity CRITICAL,HIGH app:${{ github.sha }}

      - name: Download Trufflehog v3
        run: |
          curl -sSL -o trufflehog.tar.gz https://github.com/trufflesecurity/trufflehog/releases/download/v3.77.0/trufflehog_3.77.0_linux_amd64.tar.gz
          tar -xzf trufflehog.tar.gz trufflehog
          chmod +x trufflehog

      - name: Trufflehog Filesystem Scan (JSON)
        run: |
          ./trufflehog filesystem --json . > trufflehog.json
        continue-on-error: true

      - name: Convert Trufflehog JSON to SARIF
        run: |
          python3 <<EOF
          import json
          import sys

          with open('trufflehog.json') as f:
              findings = [json.loads(line) for line in f if line.strip()]

          sarif = {
              "version": "2.1.0",
              "runs": [{
                  "tool": {
                      "driver": {
                          "name": "trufflehog",
                          "rules": [{
                              "id": "trufflehog-secret",
                              "name": "TruffleHog Secret",
                              "shortDescription": {"text": "Potential secret detected by TruffleHog"}
                          }]
                      }
                  },
                  "results": [
                      {
                          "ruleId": "trufflehog-secret",
                          "level": "error",
                          "message": {"text": finding.get("reason", "Secret found")},
                          "locations": [{
                              "physicalLocation": {
                                  "artifactLocation": {"uri": finding.get("path", "unknown")},
                                  "region": {"startLine": finding.get("start", 1)}
                              }
                          }]
                      }
                      for finding in findings
                  ]
              }]
          }
          with open('trufflehog.sarif', 'w') as f:
              json.dump(sarif, f, indent=2)
          EOF

      - name: Merge SARIF reports
        run: |
          jq -s '{version:"2.1.0", runs: [.[].runs[]]}' \
            semgrep.sarif trufflehog.sarif trivy-fs.sarif trivy-img.sarif > merged.sarif

      - name: Extract findings
        id: findings
        run: |
          jq -r '
            .runs[].results[]
            | select(.level=="error" or .level=="warning")
            | "\(.tool.driver.name)|||\(.rule.id)|||\(.locations[0].physicalLocation.artifactLocation.uri)|||\(.locations[0].physicalLocation.region.startLine)//\(.level|ascii_upcase)"' \
            merged.sarif | sort -u > findings.txt
          echo "found=$(wc -l < findings.txt)" >> "$GITHUB_OUTPUT"
          if grep -Ei '//(ERROR|WARNING)' findings.txt | grep -q .; then
            echo "high_critical_found=1" >> "$GITHUB_OUTPUT"
          else
            echo "high_critical_found=0" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload findings
        uses: actions/upload-artifact@v4
        with:
          name: security-findings
          path: |
            findings.txt
            merged.sarif

      - name: Fail on unresolved findings
        if: steps.findings.outputs.high_critical_found == '1'
        run: |
          echo "‚ùå Security scan failed: HIGH or CRITICAL findings present."
          cat findings.txt
          exit 1

      - name: Dependency Review
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4

      - name: PR summary comment
        if: github.event_name == 'pull_request'
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            ## Security Scan Results

            ${{ steps.findings.outputs.found }} potential HIGH or CRITICAL security issues detected.

            See uploaded artifacts for details.

            This PR will be **blocked** until all critical findings are resolved.
